#Copy this code in an R console (v.4.2.1)
InsPack = function (pack) {
  if(pack %in% rownames(installed.packages()) == FALSE) {
    print (paste("Instalando ",pack))
    install.packages(pack)}
} 

InsPack("shiny")
library(shiny)

ui <- fluidPage(
  titlePanel("À la quête de la médiane!"),

# Sidebar with a slider input
  sidebarLayout(
    sidebarPanel(
      selectInput("m",
                     "Please select the number of Dice (m):",
                     c("1","2",
		       "3","4",
	    	       "5","6",
		       "7","8",
		       "9","10")),
      sliderInput("n",
                  "Select the number of Rolls (n):",
                  min = 1,
                  max = 100,
                  value = 1,
                  step = 1),
      sliderInput("s",
                  "Select the number of Simulations (s):",
                  min = 1,
                  max = 1000, #change this number to obtain more precision in the simulated probability
                  value = 1,
                  step = 1),
    ),
         mainPanel(
         plotOutput("mortPlot",width = "75%",height=500),
         textOutput("text1")#,
       #  textOutput("text2")
       # )   
      )
    )
  )


# Define server logic required to draw a histogram
server <- function(input, output) {
  output$mortPlot <- renderPlot({
	mr0<- input$m                
        if(mr0 == "1"){
        mr=1
	}
        else if(mr0 == "2"){
        mr=2
	}
        else if(mr0 == "3"){
        mr=3
	}
        else if(mr0 == "4"){
        mr=4
	}
        else if(mr0 == "5"){
        mr=5
	}
        else if(mr0 == "6"){
        mr=6	
	}
        else if(mr0 == "7"){
        mr=7
        }
        else if(mr0 == "8"){
        mr=8
        }
        else if(mr0 == "9"){
        mr=9
	}
        else if(mr0 == "10"){
        mr=10
        }	

	nr <- input$n
        s  <- input$s
	m=mr # dice
	n=nr # rolls
 
#        s=1000
	win=numeric(s)    
	for(p in 1:s) {

#	m=2 # dice
#        n=24 # rolls
	dado=c(1:6)        	
        #################	
	results = matrix( ,m,n)    #las filas son dados
        sixresults = matrix( ,m,n) #las columnas tiradas
		for(k in 1:m) {
			for(j in 1:n) {
        		results[k,j]=t(t(sample(dado,1,replace=T)))
                		if(results[k,j] == 6){
        			sixresults [k,j]= 1}
	        		                      }
                                       }
       
        #resultwin=sum(gameresult=colSums(sixresults,dims=1,na.rm = TRUE)) 
	resultwin=colSums(sixresults,dims=1,na.rm = TRUE)
        #win=0
		for(j in 1:n){
		if(resultwin[j] == m){
  				#win=1}
              			win[p]=1
			}
}
	        }
        results
	sixresults
	resultwin 
        win
        #################
#The Chevalier wins if the number of sixes matches the number of rolled dice

        #################

        Pwins=sum(win)/s
        Pwins       

	Pwin<- 1-(1-(1/(6^m)))^n
        Pwin
        
        par(mfrow=c(1,2))      
        pie(c(Pwin,1-Pwin), labels = c("P(win)","P(loss)"), col=c("blue","red")) 
        my_bar <-barplot(c(sum(win),s-sum(win)),names=c("win","loss"),col=c("blue","red"),ylim=c(0,max(sum(win)+30,s-sum(win)+30)))
        text(my_bar, c(max(sum(win)+15,s-sum(win)+15),max(sum(win)+15,s-sum(win)+15)),paste("", c(sum(win),s-sum(win)),sep=""),cex=1.5) 
	#text(my_bar, c(sum(win)+10,s-sum(win)+10), paste("", c(sum(win),s-sum(win)), sep=""),cex=1) 
        #pie(c(Pwins,1-Pwins), labels = c("P(win)","P(loss)"), col=c("blue","red")) 
	#plot(seq(1,s,by=1),win,col="black",cex=0.5,pch=15,xlim=c(1,s),ylim=c(0,1),xlab="Simulation",ylab="Simulated P(win)")
   
        output$text1<- renderText({
        paste(                    "P(win):", sprintf("%1.5f",Pwin), ", P(loss):", sprintf("%1.5f",1-Pwin), ",  Simulated P(win):",sprintf("%1.5f",Pwins))})
        #paste(                    "P(win):", sprintf("%1.5f",Pwin), ", P(loss):", sprintf("%1.5f",1-Pwin), ",  Simulated P(win):",sprintf("%1.5f",Pwins),", Won:", sprintf("%1.0f",sum(win)), "Lost:",sprintf("%1.0f",s-sum(win)))})
        #output$text2<- renderText({
        #paste(                                                           "Won:", sum(win), "Lost:",s-sum(win))})
  })
}

shinyApp(ui = ui, server = server)
